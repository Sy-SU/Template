#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
生成 tex/code.tex：
- 以 code/ 的一级子目录为 \section
- 每个源码文件一个 \subsection
- 小节内先 \input docs/<同路径同名>.tex（若存在）
  再 \inputminted 插入源码
"""
from pathlib import Path
from collections import defaultdict

REPO_ROOT = Path(__file__).resolve().parents[1]
CODE_DIR  = REPO_ROOT / "code"
DESC_DIR  = REPO_ROOT / "docs"
TEX_DIR   = REPO_ROOT / "tex"
OUT_TEX   = TEX_DIR / "code.tex"

# minted 语言映射
LANG_MAP = {
    ".cpp":"cpp", ".cc":"cpp", ".cxx":"cpp", ".hpp":"cpp", ".h":"cpp", ".c":"c",
    ".py":"python", ".java":"java", ".rs":"rust", ".go":"go",
    ".js":"javascript", ".ts":"typescript", ".sh":"bash",
    ".md":"text", ".txt":"text"
}

# minted 统一选项（若想“完全原样”，可去掉 linenos / breaklines）
MINTED_OPTS = r"[fontsize=\small, linenos, breaklines, tabsize=2]"

def lang_of(p: Path) -> str:
    return LANG_MAP.get(p.suffix.lower(), "text")

def top_group(rel: Path) -> str:
    """返回 code/ 下相对路径的一级目录名；没有则归为 root"""
    parts = rel.parts
    return parts[0] if len(parts) >= 2 else "root"

def iter_code_files():
    """遍历 code/ 下所有文件（跳过隐藏文件）"""
    for p in CODE_DIR.rglob("*"):
        if p.is_file() and not p.name.startswith("."):
            yield p

def desc_path_for(src: Path) -> Path:
    """给定 code/ 下的文件，返回 docs/ 下的同结构 .tex 路径"""
    rel = src.relative_to(CODE_DIR)         # e.g. data-structure/DSU.cpp
    return (DESC_DIR / rel).with_suffix(".tex")

def to_posix_from_repo(p: Path) -> str:
    """把绝对路径转成相对仓库根目录的 posix 路径（用于 LaTeX）"""
    return p.relative_to(REPO_ROOT).as_posix()

def main():
    TEX_DIR.mkdir(parents=True, exist_ok=True)

    groups = defaultdict(list)  # group -> [Path]
    for src in iter_code_files():
        g = top_group(src.relative_to(CODE_DIR))
        groups[g].append(src)

    # 排序：按组名字典序（把 root 放最后更直观；需要放前可改 key）
    for g in groups:
        groups[g].sort(key=lambda p: p.name.lower())
    ordered_groups = sorted(groups.keys(), key=lambda s: (s == "root", s.lower()))

    missing_desc = 0
    files_total  = 0

    with OUT_TEX.open("w", encoding="utf-8") as f:
        f.write("% Auto-generated by tools/gen.py — DO NOT EDIT\n\n")
        for group in ordered_groups:
            f.write("\\section{%s}\n\n" % group)

            for src in groups[group]:
                files_total += 1
                f.write("\\subsection{%s}\n\n" % src.name)

                # 讲解（若存在）
                dpath = desc_path_for(src)
                if dpath.exists():
                    f.write("\\input{%s}\n\n" % to_posix_from_repo(dpath))
                else:
                    missing_desc += 1
                    # 也可以在这里写一个占位提示（通常不需要）
                    # f.write("\\textit{(No description yet.)}\n\n")

                # 源码
                lang = lang_of(src)
                f.write("\\inputminted%s{%s}{%s}\n\n" %
                        (MINTED_OPTS, lang, to_posix_from_repo(src)))

    print(f"[OK] Generated {OUT_TEX}")
    if missing_desc:
        print(f"[WARN] {missing_desc} file(s) have no description in '{DESC_DIR}'.")
    print(f"[INFO] Total code files processed: {files_total}")

if __name__ == "__main__":
    main()
